package bits

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func Test_shift64(t *testing.T) {
	tbl := []struct {
		in   uint64
		bits int8
		outR uint64
		outL uint64
	}{
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: 1,
			outR: 0b1000000000000000000000000000011111111111111111111111111111111111,
			outL: 0b0000000000000000000000000001111111111111111111111111111111111110,
		},
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: -1,
			outR: 0b0000000000000000000000000001111111111111111111111111111111111110,
			outL: 0b1000000000000000000000000000011111111111111111111111111111111111,
		},
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: 65,
			outR: 0b1000000000000000000000000000011111111111111111111111111111111111,
			outL: 0b0000000000000000000000000001111111111111111111111111111111111110,
		},
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: -65,
			outR: 0b0000000000000000000000000001111111111111111111111111111111111110,
			outL: 0b1000000000000000000000000000011111111111111111111111111111111111,
		},
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: 10,
			outR: 0b1111111111000000000000000000000000000011111111111111111111111111,
			outL: 0b0000000000000000001111111111111111111111111111111111110000000000,
		},
		{
			in:   0b0000000000000000000000000000111111111111111111111111111111111111,
			bits: -10,
			outR: 0b0000000000000000001111111111111111111111111111111111110000000000,
			outL: 0b1111111111000000000000000000000000000011111111111111111111111111,
		},
	}

	for _, el := range tbl {
		resR := RotateR64(el.in, el.bits)
		resL := RotateL64(el.in, el.bits)
		assert.Equal(t, el.outR, resR, "incorrect right shift value for %d bits:\nexpected: %064b\nactual  : %064b", el.bits, el.outR, resR)
		assert.Equal(t, el.outL, resL, "incorrect left shift value for %d bits:\nexpected: %064b\nactual  : %064b", el.bits, el.outL, resL)
	}
}
