package bitfield

// https://cs.opensource.google/go/x/text/+/master:internal/gen/bitfield/bitfield.go
// https://github.com/HewlettPackard/structex

var maskMap = map[int]uint64{
	0:  0b0000000000000000000000000000000000000000000000000000000000000000,
	1:  0b0000000000000000000000000000000000000000000000000000000000000001,
	2:  0b0000000000000000000000000000000000000000000000000000000000000011,
	3:  0b0000000000000000000000000000000000000000000000000000000000000111,
	4:  0b0000000000000000000000000000000000000000000000000000000000001111,
	5:  0b0000000000000000000000000000000000000000000000000000000000011111,
	6:  0b0000000000000000000000000000000000000000000000000000000000111111,
	7:  0b0000000000000000000000000000000000000000000000000000000001111111,
	8:  0b0000000000000000000000000000000000000000000000000000000011111111,
	9:  0b0000000000000000000000000000000000000000000000000000000111111111,
	10: 0b0000000000000000000000000000000000000000000000000000001111111111,
	11: 0b0000000000000000000000000000000000000000000000000000011111111111,
	12: 0b0000000000000000000000000000000000000000000000000000111111111111,
	13: 0b0000000000000000000000000000000000000000000000000001111111111111,
	14: 0b0000000000000000000000000000000000000000000000000011111111111111,
	15: 0b0000000000000000000000000000000000000000000000000111111111111111,
	16: 0b0000000000000000000000000000000000000000000000001111111111111111,
	17: 0b0000000000000000000000000000000000000000000000011111111111111111,
	18: 0b0000000000000000000000000000000000000000000000111111111111111111,
	19: 0b0000000000000000000000000000000000000000000001111111111111111111,
	20: 0b0000000000000000000000000000000000000000000011111111111111111111,
	21: 0b0000000000000000000000000000000000000000000111111111111111111111,
	22: 0b0000000000000000000000000000000000000000001111111111111111111111,
	23: 0b0000000000000000000000000000000000000000011111111111111111111111,
	24: 0b0000000000000000000000000000000000000000111111111111111111111111,
	25: 0b0000000000000000000000000000000000000001111111111111111111111111,
	26: 0b0000000000000000000000000000000000000011111111111111111111111111,
	27: 0b0000000000000000000000000000000000000111111111111111111111111111,
	28: 0b0000000000000000000000000000000000001111111111111111111111111111,
	29: 0b0000000000000000000000000000000000011111111111111111111111111111,
	30: 0b0000000000000000000000000000000000111111111111111111111111111111,
	31: 0b0000000000000000000000000000000001111111111111111111111111111111,
	32: 0b0000000000000000000000000000000011111111111111111111111111111111,
	33: 0b0000000000000000000000000000000111111111111111111111111111111111,
	34: 0b0000000000000000000000000000001111111111111111111111111111111111,
	35: 0b0000000000000000000000000000011111111111111111111111111111111111,
	36: 0b0000000000000000000000000000111111111111111111111111111111111111,
	37: 0b0000000000000000000000000001111111111111111111111111111111111111,
	38: 0b0000000000000000000000000011111111111111111111111111111111111111,
	39: 0b0000000000000000000000000111111111111111111111111111111111111111,
	40: 0b0000000000000000000000001111111111111111111111111111111111111111,
	41: 0b0000000000000000000000011111111111111111111111111111111111111111,
	42: 0b0000000000000000000000111111111111111111111111111111111111111111,
	43: 0b0000000000000000000001111111111111111111111111111111111111111111,
	44: 0b0000000000000000000011111111111111111111111111111111111111111111,
	45: 0b0000000000000000000111111111111111111111111111111111111111111111,
	46: 0b0000000000000000001111111111111111111111111111111111111111111111,
	47: 0b0000000000000000011111111111111111111111111111111111111111111111,
	48: 0b0000000000000000111111111111111111111111111111111111111111111111,
	49: 0b0000000000000001111111111111111111111111111111111111111111111111,
	50: 0b0000000000000011111111111111111111111111111111111111111111111111,
	51: 0b0000000000000111111111111111111111111111111111111111111111111111,
	52: 0b0000000000001111111111111111111111111111111111111111111111111111,
	53: 0b0000000000011111111111111111111111111111111111111111111111111111,
	54: 0b0000000000111111111111111111111111111111111111111111111111111111,
	55: 0b0000000001111111111111111111111111111111111111111111111111111111,
	56: 0b0000000011111111111111111111111111111111111111111111111111111111,
	57: 0b0000000111111111111111111111111111111111111111111111111111111111,
	58: 0b0000001111111111111111111111111111111111111111111111111111111111,
	59: 0b0000011111111111111111111111111111111111111111111111111111111111,
	60: 0b0000111111111111111111111111111111111111111111111111111111111111,
	61: 0b0001111111111111111111111111111111111111111111111111111111111111,
	62: 0b0011111111111111111111111111111111111111111111111111111111111111,
	63: 0b0111111111111111111111111111111111111111111111111111111111111111,
}

//Extract bitfield value as uint64 from start bit and use len bits
func Extract(v uint64, start, len int) uint64 {
	r := (v >> start) & maskMap[len]
	return r
}
